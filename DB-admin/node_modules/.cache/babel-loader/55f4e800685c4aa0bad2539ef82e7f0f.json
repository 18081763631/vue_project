{"remainingRequest":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\lenovo\\Desktop\\vue-admin\\src\\utils\\tree.js","dependencies":[{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\src\\utils\\tree.js","mtime":1585839394000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n\n/**\n * xiegaolei\n */\nimport { objectMerge } from '@/utils'; // 递归格式化成多维数组\n\nfunction listToTreeMulti(list) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var pk = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';\n  var pid = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'pid';\n  var child = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'children';\n  var other = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var tree = [];\n\n  if (list) {\n    list.forEach(function (item) {\n      if (item[pid] === root) {\n        if (other !== null) {\n          item = objectMerge(item, other);\n        }\n\n        var children = listToTreeMulti(list, item[pk], pk, pid, child, other);\n\n        if (children.length) {\n          item[child] = children;\n        }\n\n        tree.push(item);\n      }\n    });\n  }\n\n  return tree;\n}\n\nfunction getParentsId(list, id) {\n  var pk = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'id';\n  var pid = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'pid';\n  var tree = [];\n\n  if (list) {\n    list.forEach(function (item) {\n      if (item[pk] === id) {\n        tree.unshift(item[pid]);\n        var parent = getParentsId(list, item[pid], pk, pid);\n\n        if (parent.length) {\n          tree = tree.concat(parent);\n        }\n      }\n    });\n  }\n\n  return tree;\n} // 递归修改值\n\n\nfunction upadteArr(arr, attr, val, source) {\n  if (arr) {\n    arr.map(function (item) {\n      if (item[attr] === val) {\n        objectMerge(item, source);\n      } else {\n        upadteArr(item.children, attr, val, source);\n      }\n    });\n  }\n\n  return arr;\n}\n\nvar tree = {\n  listToTreeMulti: listToTreeMulti,\n  getParentsId: getParentsId,\n  upadteArr: upadteArr\n};\nexport default tree;",{"version":3,"sources":["C:/Users/lenovo/Desktop/vue-admin/src/utils/tree.js"],"names":["objectMerge","listToTreeMulti","list","root","pk","pid","child","other","tree","forEach","item","children","length","push","getParentsId","id","unshift","parent","concat","upadteArr","arr","attr","val","source","map"],"mappings":";;AAAA;;;AAGA,SAASA,WAAT,QAA4B,SAA5B,C,CAEA;;AACA,SAASC,eAAT,CAAyBC,IAAzB,EAAmG;AAAA,MAApEC,IAAoE,uEAA7D,CAA6D;AAAA,MAA1DC,EAA0D,uEAArD,IAAqD;AAAA,MAA/CC,GAA+C,uEAAzC,KAAyC;AAAA,MAAlCC,KAAkC,uEAA1B,UAA0B;AAAA,MAAdC,KAAc,uEAAN,IAAM;AACjG,MAAMC,IAAI,GAAG,EAAb;;AACA,MAAIN,IAAJ,EAAU;AACRA,IAAAA,IAAI,CAACO,OAAL,CAAa,UAAAC,IAAI,EAAI;AACnB,UAAIA,IAAI,CAACL,GAAD,CAAJ,KAAcF,IAAlB,EAAwB;AACtB,YAAII,KAAK,KAAK,IAAd,EAAoB;AAClBG,UAAAA,IAAI,GAAGV,WAAW,CAACU,IAAD,EAAOH,KAAP,CAAlB;AACD;;AACD,YAAMI,QAAQ,GAAGV,eAAe,CAACC,IAAD,EAAOQ,IAAI,CAACN,EAAD,CAAX,EAAiBA,EAAjB,EAAqBC,GAArB,EAA0BC,KAA1B,EAAiCC,KAAjC,CAAhC;;AACA,YAAII,QAAQ,CAACC,MAAb,EAAqB;AACnBF,UAAAA,IAAI,CAACJ,KAAD,CAAJ,GAAcK,QAAd;AACD;;AACDH,QAAAA,IAAI,CAACK,IAAL,CAAUH,IAAV;AACD;AACF,KAXD;AAYD;;AACD,SAAOF,IAAP;AACD;;AAED,SAASM,YAAT,CAAsBZ,IAAtB,EAA4Ba,EAA5B,EAAwD;AAAA,MAAxBX,EAAwB,uEAAnB,IAAmB;AAAA,MAAbC,GAAa,uEAAP,KAAO;AACtD,MAAIG,IAAI,GAAG,EAAX;;AACA,MAAIN,IAAJ,EAAU;AACRA,IAAAA,IAAI,CAACO,OAAL,CAAa,UAAAC,IAAI,EAAI;AACnB,UAAIA,IAAI,CAACN,EAAD,CAAJ,KAAaW,EAAjB,EAAqB;AACnBP,QAAAA,IAAI,CAACQ,OAAL,CAAaN,IAAI,CAACL,GAAD,CAAjB;AACA,YAAMY,MAAM,GAAGH,YAAY,CAACZ,IAAD,EAAOQ,IAAI,CAACL,GAAD,CAAX,EAAkBD,EAAlB,EAAsBC,GAAtB,CAA3B;;AACA,YAAIY,MAAM,CAACL,MAAX,EAAmB;AACjBJ,UAAAA,IAAI,GAAGA,IAAI,CAACU,MAAL,CAAYD,MAAZ,CAAP;AACD;AACF;AACF,KARD;AASD;;AACD,SAAOT,IAAP;AACD,C,CAED;;;AACA,SAASW,SAAT,CAAmBC,GAAnB,EAAwBC,IAAxB,EAA8BC,GAA9B,EAAmCC,MAAnC,EAA2C;AACzC,MAAIH,GAAJ,EAAS;AACPA,IAAAA,GAAG,CAACI,GAAJ,CAAQ,UAAAd,IAAI,EAAI;AACd,UAAIA,IAAI,CAACW,IAAD,CAAJ,KAAeC,GAAnB,EAAwB;AACtBtB,QAAAA,WAAW,CAACU,IAAD,EAAOa,MAAP,CAAX;AACD,OAFD,MAEO;AACLJ,QAAAA,SAAS,CAACT,IAAI,CAACC,QAAN,EAAgBU,IAAhB,EAAsBC,GAAtB,EAA2BC,MAA3B,CAAT;AACD;AACF,KAND;AAOD;;AAED,SAAOH,GAAP;AACD;;AAED,IAAMZ,IAAI,GAAG;AACXP,EAAAA,eAAe,EAAfA,eADW;AAEXa,EAAAA,YAAY,EAAZA,YAFW;AAGXK,EAAAA,SAAS,EAATA;AAHW,CAAb;AAMA,eAAeX,IAAf","sourcesContent":["/**\n * xiegaolei\n */\nimport { objectMerge } from '@/utils'\n\n// 递归格式化成多维数组\nfunction listToTreeMulti(list, root = 0, pk = 'id', pid = 'pid', child = 'children', other = null) {\n  const tree = []\n  if (list) {\n    list.forEach(item => {\n      if (item[pid] === root) {\n        if (other !== null) {\n          item = objectMerge(item, other)\n        }\n        const children = listToTreeMulti(list, item[pk], pk, pid, child, other)\n        if (children.length) {\n          item[child] = children\n        }\n        tree.push(item)\n      }\n    })\n  }\n  return tree\n}\n\nfunction getParentsId(list, id, pk = 'id', pid = 'pid') {\n  let tree = []\n  if (list) {\n    list.forEach(item => {\n      if (item[pk] === id) {\n        tree.unshift(item[pid])\n        const parent = getParentsId(list, item[pid], pk, pid)\n        if (parent.length) {\n          tree = tree.concat(parent)\n        }\n      }\n    })\n  }\n  return tree\n}\n\n// 递归修改值\nfunction upadteArr(arr, attr, val, source) {\n  if (arr) {\n    arr.map(item => {\n      if (item[attr] === val) {\n        objectMerge(item, source)\n      } else {\n        upadteArr(item.children, attr, val, source)\n      }\n    })\n  }\n\n  return arr\n}\n\nconst tree = {\n  listToTreeMulti,\n  getParentsId,\n  upadteArr\n}\n\nexport default tree\n\n"]}]}