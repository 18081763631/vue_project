{"remainingRequest":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lenovo\\Desktop\\vue-admin\\src\\views\\layout\\components\\Sidebar\\SidebarItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\src\\views\\layout\\components\\Sidebar\\SidebarItem.vue","mtime":1593599913191},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport path from 'path'\nimport { generateTitle } from '@/utils/i18n'\nimport { validateURL } from '@/utils/validate'\nimport Item from './Item'\n\nexport default {\n  name: 'SidebarItem',\n  components: { Item },\n  props: {\n    // route object\n    item: {\n      type: Object,\n      required: true\n    },\n    isNest: {\n      type: Boolean,\n      default: false\n    },\n    basePath: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      onlyOneChild: null\n    }\n  },\n  methods: {\n    hasOneShowingChild(children, parent) {\n      const showingChildren = children.filter(item => {\n        if (item.hidden) {\n          return false\n        } else {\n          // Temp set(will be used if only has one showing child)\n          this.onlyOneChild = item\n          return true\n        }\n      })\n\n      // When there is only one child router, the child router is displayed by default\n      if (showingChildren.length === 1) {\n        return true\n      }\n\n      // Show parent if there are no child router to display\n      if (showingChildren.length === 0) {\n        this.onlyOneChild = { ... parent, path: '', noShowingChildren: true }\n        return true\n      }\n\n      return false\n    },\n    resolvePath(routePath) {\n      return path.resolve(this.basePath, routePath)\n    },\n    isExternalLink(routePath) {\n      return validateURL(routePath)\n    },\n    clickLink(routePath, e) {\n      if (!this.isExternalLink(routePath)) {\n        e.preventDefault()\n        const path = this.resolvePath(routePath)\n        this.$router.push(path)\n      }\n    },\n    generateTitle\n  }\n}\n",{"version":3,"sources":["SidebarItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SidebarItem.vue","sourceRoot":"src/views/layout/components/Sidebar","sourcesContent":["<template>\n  <div v-if=\"!item.hidden&&item.children\" class=\"menu-wrapper\">\n\n    <template v-if=\"hasOneShowingChild(item.children,item) && (!onlyOneChild.children||onlyOneChild.noShowingChildren)&&!item.alwaysShow\">\n      <a :href=\"onlyOneChild.path\" target=\"_blank\" @click=\"clickLink(onlyOneChild.path,$event)\">\n        <el-menu-item :index=\"resolvePath(onlyOneChild.path)\" :class=\"{'submenu-title-noDropdown':!isNest}\">\n          <item v-if=\"onlyOneChild.meta\" :icon=\"onlyOneChild.meta.icon||item.meta.icon\" :title=\"generateTitle(onlyOneChild.meta.title)\" />\n        </el-menu-item>\n      </a>\n    </template>\n\n    <el-submenu v-else :index=\"item.name||item.path\">\n      <template slot=\"title\">\n        <item v-if=\"item.meta\" :icon=\"item.meta.icon\" :title=\"generateTitle(item.meta.title)\"/>\n      </template>\n      <template v-for=\"child in item.children\" v-if=\"!child.hidden\">\n        <sidebar-item\n          v-if=\"child.children&&child.children.length>0\"\n          :is-nest=\"true\"\n          :item=\"child\"\n          :key=\"child.path\"\n          :base-path=\"resolvePath(child.path)\"\n          class=\"nest-menu\" />\n\n        <a v-else :href=\"child.path\" :key=\"child.name\" target=\"_blank\" @click=\"clickLink(child.path,$event)\">\n          <el-menu-item :index=\"resolvePath(child.path)\">\n            <item v-if=\"child.meta\" :icon=\"child.meta.icon\" :title=\"generateTitle(child.meta.title)\" />\n          </el-menu-item>\n        </a>\n      </template>\n    </el-submenu>\n\n  </div>\n</template>\n\n<script>\nimport path from 'path'\nimport { generateTitle } from '@/utils/i18n'\nimport { validateURL } from '@/utils/validate'\nimport Item from './Item'\n\nexport default {\n  name: 'SidebarItem',\n  components: { Item },\n  props: {\n    // route object\n    item: {\n      type: Object,\n      required: true\n    },\n    isNest: {\n      type: Boolean,\n      default: false\n    },\n    basePath: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      onlyOneChild: null\n    }\n  },\n  methods: {\n    hasOneShowingChild(children, parent) {\n      const showingChildren = children.filter(item => {\n        if (item.hidden) {\n          return false\n        } else {\n          // Temp set(will be used if only has one showing child)\n          this.onlyOneChild = item\n          return true\n        }\n      })\n\n      // When there is only one child router, the child router is displayed by default\n      if (showingChildren.length === 1) {\n        return true\n      }\n\n      // Show parent if there are no child router to display\n      if (showingChildren.length === 0) {\n        this.onlyOneChild = { ... parent, path: '', noShowingChildren: true }\n        return true\n      }\n\n      return false\n    },\n    resolvePath(routePath) {\n      return path.resolve(this.basePath, routePath)\n    },\n    isExternalLink(routePath) {\n      return validateURL(routePath)\n    },\n    clickLink(routePath, e) {\n      if (!this.isExternalLink(routePath)) {\n        e.preventDefault()\n        const path = this.resolvePath(routePath)\n        this.$router.push(path)\n      }\n    },\n    generateTitle\n  }\n}\n</script>\n"]}]}