{"remainingRequest":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lenovo\\Desktop\\vue-admin\\src\\views\\dashboard\\admin\\components\\LineChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\src\\views\\dashboard\\admin\\components\\LineChart.vue","mtime":1593754313690},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport echarts from 'echarts'\nrequire('echarts/theme/macarons') // echarts theme\nimport { debounce } from '@/utils'\n\nexport default {\n  props: {\n    className: {\n      type: String,\n      default: 'chart'\n    },\n    width: {\n      type: String,\n      default: '100%'\n    },\n    height: {\n      type: String,\n      default: '350px'\n    },\n    autoResize: {\n      type: Boolean,\n      default: true\n    },\n    chartData: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      chart: null\n    }\n  },\n  watch: {\n    chartData: {\n      deep: true,\n      handler(val) {\n        this.setOptions(val)\n      }\n    }\n  },\n  mounted() {\n    this.initChart()\n    if (this.autoResize) {\n      this.__resizeHandler = debounce(() => {\n        if (this.chart) {\n          this.chart.resize()\n        }\n      }, 100)\n      window.addEventListener('resize', this.__resizeHandler)\n    }\n\n    // 监听侧边栏的变化\n    const sidebarElm = document.getElementsByClassName('sidebar-container')[0]\n    sidebarElm.addEventListener('transitionend', this.sidebarResizeHandler)\n  },\n  beforeDestroy() {\n    if (!this.chart) {\n      return\n    }\n    if (this.autoResize) {\n      window.removeEventListener('resize', this.__resizeHandler)\n    }\n\n    const sidebarElm = document.getElementsByClassName('sidebar-container')[0]\n    sidebarElm.removeEventListener('transitionend', this.sidebarResizeHandler)\n\n    this.chart.dispose()\n    this.chart = null\n  },\n  methods: {\n    sidebarResizeHandler(e) {\n      if (e.propertyName === 'width') {\n        this.__resizeHandler()\n      }\n    },\n    setOptions({ expectedData, actualData } = {}) {\n      this.chart.setOption({\n        xAxis: {\n          data: ['1:00', '2:00', '3:00', '4:00', '5:00', '6:00', '7:00' , '8:00' , '9:00' , '10:00' , '11:00' , '12:00' , '13:00' , '14:00' , '15:00',\r\n\t\t          '16:00' , '17:00' , '18:00' , '19:00' , '20:00' , '21:00' , '22:00' , '23:00' , '0:00'\r\n\t\t  ],\n          boundaryGap: false,\n          axisTick: {\n            show: false\n          }\n        },\n        grid: {\n          left: 10,\n          right: 10,\n          bottom: 20,\n          top: 30,\n          containLabel: true\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross'\n          },\n          padding: [5, 10]\n        },\n        yAxis: {\n          axisTick: {\n            show: false\n          }\n        },\r\n\t\t/* 线条显示情况 */\n        legend: {\n          data: ['访问量', 'actual']\n        },\n        series: [{\n          name: '访问量', itemStyle: {\n            normal: {\n              color: '#FF005A',\n              lineStyle: {\n                color: '#FF005A',\n                width: 2\n              }\n            }\n          },\n          smooth: true,\n          type: 'line',\n          data: expectedData,\n          animationDuration: 2800,\n          animationEasing: 'cubicInOut'\n        },\n/*        {\n          name: 'actual',\n          smooth: true,\n          type: 'line',\n          itemStyle: {\n            normal: {\n              color: '#3888fa',\n              lineStyle: {\n                color: '#3888fa',\n                width: 2\n              },\n              areaStyle: {\n                color: '#f3f8ff'\n              }\n            }\n          },\n          data: actualData,\n          animationDuration: 2800,\n          animationEasing: 'quadraticOut'\n        } */]\n      })\n    },\n    initChart() {\n      this.chart = echarts.init(this.$el, 'macarons')\n      this.setOptions(this.chartData)\n    }\n  }\n}\n",{"version":3,"sources":["LineChart.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"LineChart.vue","sourceRoot":"src/views/dashboard/admin/components","sourcesContent":["<template>\n  <div :class=\"className\" :style=\"{height:height,width:width}\"/>\n</template>\n\n<script>\nimport echarts from 'echarts'\nrequire('echarts/theme/macarons') // echarts theme\nimport { debounce } from '@/utils'\n\nexport default {\n  props: {\n    className: {\n      type: String,\n      default: 'chart'\n    },\n    width: {\n      type: String,\n      default: '100%'\n    },\n    height: {\n      type: String,\n      default: '350px'\n    },\n    autoResize: {\n      type: Boolean,\n      default: true\n    },\n    chartData: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      chart: null\n    }\n  },\n  watch: {\n    chartData: {\n      deep: true,\n      handler(val) {\n        this.setOptions(val)\n      }\n    }\n  },\n  mounted() {\n    this.initChart()\n    if (this.autoResize) {\n      this.__resizeHandler = debounce(() => {\n        if (this.chart) {\n          this.chart.resize()\n        }\n      }, 100)\n      window.addEventListener('resize', this.__resizeHandler)\n    }\n\n    // 监听侧边栏的变化\n    const sidebarElm = document.getElementsByClassName('sidebar-container')[0]\n    sidebarElm.addEventListener('transitionend', this.sidebarResizeHandler)\n  },\n  beforeDestroy() {\n    if (!this.chart) {\n      return\n    }\n    if (this.autoResize) {\n      window.removeEventListener('resize', this.__resizeHandler)\n    }\n\n    const sidebarElm = document.getElementsByClassName('sidebar-container')[0]\n    sidebarElm.removeEventListener('transitionend', this.sidebarResizeHandler)\n\n    this.chart.dispose()\n    this.chart = null\n  },\n  methods: {\n    sidebarResizeHandler(e) {\n      if (e.propertyName === 'width') {\n        this.__resizeHandler()\n      }\n    },\n    setOptions({ expectedData, actualData } = {}) {\n      this.chart.setOption({\n        xAxis: {\n          data: ['1:00', '2:00', '3:00', '4:00', '5:00', '6:00', '7:00' , '8:00' , '9:00' , '10:00' , '11:00' , '12:00' , '13:00' , '14:00' , '15:00',\r\n\t\t          '16:00' , '17:00' , '18:00' , '19:00' , '20:00' , '21:00' , '22:00' , '23:00' , '0:00'\r\n\t\t  ],\n          boundaryGap: false,\n          axisTick: {\n            show: false\n          }\n        },\n        grid: {\n          left: 10,\n          right: 10,\n          bottom: 20,\n          top: 30,\n          containLabel: true\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross'\n          },\n          padding: [5, 10]\n        },\n        yAxis: {\n          axisTick: {\n            show: false\n          }\n        },\r\n\t\t/* 线条显示情况 */\n        legend: {\n          data: ['访问量', 'actual']\n        },\n        series: [{\n          name: '访问量', itemStyle: {\n            normal: {\n              color: '#FF005A',\n              lineStyle: {\n                color: '#FF005A',\n                width: 2\n              }\n            }\n          },\n          smooth: true,\n          type: 'line',\n          data: expectedData,\n          animationDuration: 2800,\n          animationEasing: 'cubicInOut'\n        },\n/*        {\n          name: 'actual',\n          smooth: true,\n          type: 'line',\n          itemStyle: {\n            normal: {\n              color: '#3888fa',\n              lineStyle: {\n                color: '#3888fa',\n                width: 2\n              },\n              areaStyle: {\n                color: '#f3f8ff'\n              }\n            }\n          },\n          data: actualData,\n          animationDuration: 2800,\n          animationEasing: 'quadraticOut'\n        } */]\n      })\n    },\n    initChart() {\n      this.chart = echarts.init(this.$el, 'macarons')\n      this.setOptions(this.chartData)\n    }\n  }\n}\n</script>\n"]}]}