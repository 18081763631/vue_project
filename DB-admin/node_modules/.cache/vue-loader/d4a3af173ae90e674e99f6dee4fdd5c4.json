{"remainingRequest":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lenovo\\Desktop\\vue-admin\\src\\views\\manage\\rules\\form.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\src\\views\\manage\\rules\\form.vue","mtime":1585839394000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getinfo, save } from '@/api/rules'\nimport tree from '@/utils/tree'\nexport default {\n  name: 'RulesForm',\n  components: {},\n  props: {\n    ruleList: {\n      type: Array,\n      default: []\n    }\n  },\n  data() {\n    return {\n      btnLoading: false,\n      ruleTop: [{ 'id': 0, 'title': '顶级' }],\n      pid: [],\n      props_pid: { 'label': 'title', 'value': 'id' },\n      temp: {\n        id: 0,\n        pid: 0,\n        title: '',\n        name: '',\n        status: 1,\n        icon: '',\n        path: '',\n        component: 'layout/Layout',\n        hidden: 0,\n        noCache: 1,\n        alwaysShow: 1,\n        redirect: 'noredirect'\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: '编辑',\n        create: '添加'\n      },\n      rules: {\n        title: [{ required: true, message: '名称必填', trigger: 'blur' }],\n        name: [{ required: true, message: '标识必填', trigger: 'blur' }],\n        icon: [{ required: true, message: '图标必填', trigger: 'blur' }],\n        path: [{ required: true, message: '路径必填', trigger: 'blur' }],\n        component: [{ required: true, message: '组件必填', trigger: 'blur' }]\n      }\n    }\n  },\n  computed: {\n    getRulesList() {\n      return this.ruleTop.concat(tree.listToTreeMulti(this.ruleList))\n    }\n  },\n  watch: {\n    dialogFormVisible: function() {\n      this.resetTemp()\n    },\n    temp: {\n      handler(newVal, oldVal) {},\n      immediate: true,\n      deep: true\n    }\n  },\n  created() {\n\n  },\n  destroyed() {\n\n  },\n  methods: {\n    resetTemp() {\n      this.temp = {\n        id: 0,\n        pid: 0,\n        title: '',\n        name: '',\n        status: 1,\n        icon: '',\n        path: '',\n        component: 'layout/Layout',\n        hidden: 0,\n        noCache: 1,\n        alwaysShow: 1,\n        redirect: 'noredirect'\n      }\n    },\n    handleCreate() {\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.currentIndex = -1\n      this.pid = []\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleUpdate(id) {\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      const _this = this\n      getinfo(id).then(response => {\n        if (response.status === 1) {\n          _this.temp.id = response.data.id\n          _this.temp.pid = response.data.pid\n          _this.temp.title = response.data.title\n          _this.temp.name = response.data.name\n          _this.temp.status = response.data.status\n          _this.temp.icon = response.data.icon\n          _this.temp.path = response.data.path\n          _this.temp.component = response.data.component\n          _this.temp.hidden = response.data.hidden\n          _this.temp.noCache = response.data.noCache\n          _this.temp.alwaysShow = response.data.alwaysShow\n          _this.temp.redirect = response.data.redirect\n          _this.pid = tree.getParentsId(this.ruleList, id)\n        }\n      })\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    saveData() {\n      this.btnLoading = true\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          const _this = this\n          const d = this.temp\n          save(d).then(response => {\n            if (response.status === 1) {\n              if (!d.id) {\n                d.id2 = response.data.id\n              }\n              this.$emit('updateRow', d)\n              _this.dialogFormVisible = false\n              _this.$message.success(response.msg)\n            } else {\n              _this.$message.error(response.msg)\n            }\n            _this.btnLoading = false\n          }).catch((error) => {\n            this.btnLoading = false\n          })\n        } else {\n          this.btnLoading = false\n        }\n      })\n    },\n    handleChange(value) {\n      if (value.length) {\n        this.temp.pid = value[value.length - 1]\n      }\n    }\n  }\n}\n",{"version":3,"sources":["form.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"form.vue","sourceRoot":"src/views/manage/rules","sourcesContent":["<template>\n  <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n    <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"70px\" style=\"width: 100%; height: 50vh;overflow-y: scroll;\">\n      <el-form-item label=\"上级\" prop=\"pid\">\n        <el-cascader v-model=\"pid\" :options=\"getRulesList\" :props=\"props_pid\" placeholder=\"请选择\" change-on-select @change=\"handleChange\"/>\n      </el-form-item>\n      <el-form-item label=\"名称\" prop=\"title\">\n        <el-input v-model=\"temp.title\" clearable/>\n      </el-form-item>\n      <el-form-item label=\"标识\" prop=\"name\">\n        <el-input v-model=\"temp.name\" clearable/>\n      </el-form-item>\n      <el-form-item label=\"图标\" prop=\"icon\">\n        <el-input v-model=\"temp.icon\" clearable/>\n      </el-form-item>\n      <el-form-item label=\"路径\" prop=\"path\">\n        <el-input v-model=\"temp.path\" clearable/>\n      </el-form-item>\n      <el-form-item label=\"组件\" prop=\"component\">\n        <el-input v-model=\"temp.component\" clearable/>\n      </el-form-item>\n      <el-form-item label=\"跳转\" prop=\"redirect\">\n        <el-input v-model=\"temp.redirect\" clearable/>\n      </el-form-item>\n      <el-form-item label=\"状态\">\n        <el-radio-group v-model=\"temp.status\">\n          <el-radio :label=\"1\">正常</el-radio>\n          <el-radio :label=\"0\">禁用</el-radio>\n        </el-radio-group>\n      </el-form-item>\n      <el-form-item label=\"隐藏\">\n        <el-radio-group v-model=\"temp.hidden\">\n          <el-radio :label=\"1\">是</el-radio>\n          <el-radio :label=\"0\">否</el-radio>\n        </el-radio-group>\n      </el-form-item>\n      <el-form-item label=\"缓存\">\n        <el-radio-group v-model=\"temp.noCache\">\n          <el-radio :label=\"0\">是</el-radio>\n          <el-radio :label=\"1\">否</el-radio>\n        </el-radio-group>\n      </el-form-item>\n      <el-form-item label=\"展示\">\n        <el-radio-group v-model=\"temp.alwaysShow\">\n          <el-radio :label=\"1\">是</el-radio>\n          <el-radio :label=\"0\">否</el-radio>\n        </el-radio-group>\n      </el-form-item>\n    </el-form>\n    <div slot=\"footer\" class=\"dialog-footer\">\n      <el-button @click=\"dialogFormVisible = false\">取消</el-button>\n      <el-button :loading=\"btnLoading\" type=\"primary\" @click=\"saveData()\">保存</el-button>\n    </div>\n  </el-dialog>\n</template>\n\n<script>\nimport { getinfo, save } from '@/api/rules'\nimport tree from '@/utils/tree'\nexport default {\n  name: 'RulesForm',\n  components: {},\n  props: {\n    ruleList: {\n      type: Array,\n      default: []\n    }\n  },\n  data() {\n    return {\n      btnLoading: false,\n      ruleTop: [{ 'id': 0, 'title': '顶级' }],\n      pid: [],\n      props_pid: { 'label': 'title', 'value': 'id' },\n      temp: {\n        id: 0,\n        pid: 0,\n        title: '',\n        name: '',\n        status: 1,\n        icon: '',\n        path: '',\n        component: 'layout/Layout',\n        hidden: 0,\n        noCache: 1,\n        alwaysShow: 1,\n        redirect: 'noredirect'\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: '编辑',\n        create: '添加'\n      },\n      rules: {\n        title: [{ required: true, message: '名称必填', trigger: 'blur' }],\n        name: [{ required: true, message: '标识必填', trigger: 'blur' }],\n        icon: [{ required: true, message: '图标必填', trigger: 'blur' }],\n        path: [{ required: true, message: '路径必填', trigger: 'blur' }],\n        component: [{ required: true, message: '组件必填', trigger: 'blur' }]\n      }\n    }\n  },\n  computed: {\n    getRulesList() {\n      return this.ruleTop.concat(tree.listToTreeMulti(this.ruleList))\n    }\n  },\n  watch: {\n    dialogFormVisible: function() {\n      this.resetTemp()\n    },\n    temp: {\n      handler(newVal, oldVal) {},\n      immediate: true,\n      deep: true\n    }\n  },\n  created() {\n\n  },\n  destroyed() {\n\n  },\n  methods: {\n    resetTemp() {\n      this.temp = {\n        id: 0,\n        pid: 0,\n        title: '',\n        name: '',\n        status: 1,\n        icon: '',\n        path: '',\n        component: 'layout/Layout',\n        hidden: 0,\n        noCache: 1,\n        alwaysShow: 1,\n        redirect: 'noredirect'\n      }\n    },\n    handleCreate() {\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.currentIndex = -1\n      this.pid = []\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    handleUpdate(id) {\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      const _this = this\n      getinfo(id).then(response => {\n        if (response.status === 1) {\n          _this.temp.id = response.data.id\n          _this.temp.pid = response.data.pid\n          _this.temp.title = response.data.title\n          _this.temp.name = response.data.name\n          _this.temp.status = response.data.status\n          _this.temp.icon = response.data.icon\n          _this.temp.path = response.data.path\n          _this.temp.component = response.data.component\n          _this.temp.hidden = response.data.hidden\n          _this.temp.noCache = response.data.noCache\n          _this.temp.alwaysShow = response.data.alwaysShow\n          _this.temp.redirect = response.data.redirect\n          _this.pid = tree.getParentsId(this.ruleList, id)\n        }\n      })\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    saveData() {\n      this.btnLoading = true\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          const _this = this\n          const d = this.temp\n          save(d).then(response => {\n            if (response.status === 1) {\n              if (!d.id) {\n                d.id2 = response.data.id\n              }\n              this.$emit('updateRow', d)\n              _this.dialogFormVisible = false\n              _this.$message.success(response.msg)\n            } else {\n              _this.$message.error(response.msg)\n            }\n            _this.btnLoading = false\n          }).catch((error) => {\n            this.btnLoading = false\n          })\n        } else {\n          this.btnLoading = false\n        }\n      })\n    },\n    handleChange(value) {\n      if (value.length) {\n        this.temp.pid = value[value.length - 1]\n      }\n    }\n  }\n}\n</script>\n"]}]}