{"remainingRequest":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lenovo\\Desktop\\vue-admin\\src\\components\\ScrollPane\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\src\\components\\ScrollPane\\index.vue","mtime":1585839394000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lenovo\\Desktop\\vue-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nconst padding = 15 // tag's padding\n\nexport default {\n  name: 'ScrollPane',\n  data() {\n    return {\n      left: 0\n    }\n  },\n  methods: {\n    handleScroll(e) {\n      const eventDelta = e.wheelDelta || -e.deltaY * 40\n      const $scrollWrapper = this.$refs.scrollContainer.$refs.wrap\n      $scrollWrapper.scrollLeft = $scrollWrapper.scrollLeft + eventDelta / 4\n    },\n    moveToTarget($target) {\n      const $container = this.$refs.scrollContainer.$el\n      const $containerWidth = $container.offsetWidth\n      const $scrollWrapper = this.$refs.scrollContainer.$refs.wrap\n      const $targetLeft = $target.offsetLeft\n      const $targetWidth = $target.offsetWidth\n      if ($targetLeft > $containerWidth) {\n        // tag in the right\n        $scrollWrapper.scrollLeft = $targetLeft - $containerWidth + $targetWidth + padding\n      } else {\n        // tag in the left\n        $scrollWrapper.scrollLeft = $targetLeft - padding\n      }\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/ScrollPane","sourcesContent":["<template>\n  <el-scrollbar ref=\"scrollContainer\" :vertical=\"false\" class=\"scroll-container\" @wheel.native.prevent=\"handleScroll\">\n    <slot/>\n  </el-scrollbar>\n</template>\n\n<script>\nconst padding = 15 // tag's padding\n\nexport default {\n  name: 'ScrollPane',\n  data() {\n    return {\n      left: 0\n    }\n  },\n  methods: {\n    handleScroll(e) {\n      const eventDelta = e.wheelDelta || -e.deltaY * 40\n      const $scrollWrapper = this.$refs.scrollContainer.$refs.wrap\n      $scrollWrapper.scrollLeft = $scrollWrapper.scrollLeft + eventDelta / 4\n    },\n    moveToTarget($target) {\n      const $container = this.$refs.scrollContainer.$el\n      const $containerWidth = $container.offsetWidth\n      const $scrollWrapper = this.$refs.scrollContainer.$refs.wrap\n      const $targetLeft = $target.offsetLeft\n      const $targetWidth = $target.offsetWidth\n      if ($targetLeft > $containerWidth) {\n        // tag in the right\n        $scrollWrapper.scrollLeft = $targetLeft - $containerWidth + $targetWidth + padding\n      } else {\n        // tag in the left\n        $scrollWrapper.scrollLeft = $targetLeft - padding\n      }\n    }\n  }\n}\n</script>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\" scoped>\n.scroll-container {\n  white-space: nowrap;\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  /deep/ {\n    .el-scrollbar__bar {\n      bottom: 0px;\n    }\n    .el-scrollbar__wrap {\n      height: 49px;\n    }\n  }\n}\n</style>\n"]}]}